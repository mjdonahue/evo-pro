--
-- Seeds from .ron files
--

-- From models.ron
INSERT INTO models (id, provider, name, display_name, is_active) VALUES
(X'6473FEBCF8CFFF4536A5244C7B05446E4E', 'OpenAI', 'GPT-4.1', 'GPT 4.1', 1);

-- From users.ron
INSERT INTO users (id, email, username, display_name, first_name, last_name, roles, public_key) VALUES
(X'89174DA8EC0C453F80A8A9C3D35EA3E4', 'andy@evolvco.com', 'andy', 'andy', 'Andy', 'Brito', '["Admin"]', X'616E64795F707562'),
(X'2043ACE6385E483581464AEC78002F95', 'michael@evolvco.com', 'michael', 'michael', 'Michael', 'Donahue', '["Admin"]', X'6D69636861656C5F707562');

-- From agents.ron
INSERT INTO agents (id, name, model_id, participant_id) VALUES
(X'B1720FD5E9AD46919068F029BD4A46E3', 'Evo Assistant', X'6473FEBCF8CFFF4536A5244C7B05446E4E', X'F298CC995C5A464CA55FE646D5C1B6BB');

-- From participants.ron
-- Note: There are duplicate participant IDs in the source file. Using DISTINCT logic.
INSERT OR IGNORE INTO participants (id, display_name, agent_id) VALUES
(X'FD51094DBC9F462F93AE424A92F46157', 'Evo', X'B1720FD5E9AD46919068F029BD4A46E3');

INSERT OR IGNORE INTO participants (id, display_name, user_id) VALUES
(X'48E431B66BB6438DA5F970B5D32609A6', 'Andy', X'89174DA8EC0C453F80A8A9C3D35EA3E4'),
(X'FD51094DBC9F462F93AE424A92F46157', 'Michael', X'2043ACE6385E483581464AEC78002F95');


-- From p2p_nodes.ron
-- The peer ids are properly hex-encoded
INSERT INTO p2p_nodes (participant_id, peer_id, multiaddr) VALUES
(X'89174DA8EC0C453F80A8A9C3D35EA3E4',  X'002408011220fa4bcd0da593832648b78d74cd1ee8889f18b350b1491e36c1d2a8793caaf9b7', '/ip4/0.0.0.0/tcp/0'),
(X'FD51094DBC9F462F93AE424A92F46157', X'002408011220d47dca59f56b3473b8d7a1a516e5c2b5719f0e336a4d0d06610dee3a0a917b68',  '/ip4/0.0.0.0/tcp/0');

-- -- Example Seed Data generated by Gemini
-- -- Evo-Design Seed Data
-- -- This script provides a baseline set of data for development and testing.
-- -- It uses hardcoded UUIDs (as BLOBs) to ensure relationships are stable.
--
-- -- To use:
-- -- sqlite3 your_database_file.db < seed.sql
--
-- -- Clear existing data to ensure a clean slate (optional, use with caution)
-- DELETE FROM messages;
-- DELETE FROM conversation_participants;
-- DELETE FROM conversations;
-- DELETE FROM p2p_nodes;
-- DELETE FROM participants;
-- DELETE FROM agents;
-- DELETE FROM users;
-- DELETE FROM models;
-- DELETE FROM workspaces;
--
-- -- 1. Workspace
-- -- Create a default workspace for everything to live in.
-- INSERT INTO workspaces (id, name, description, workspace_type, status) VALUES
-- (X'00000000000000000000000000000001', 'Primary Workspace', 'Default workspace for personal and agent interaction.', 0, 0);
--
-- -- 2. Models
-- -- Define a model that our agent can use.
-- INSERT INTO models (id, provider, name, display_name, model_type, context_size, max_tokens, is_active) VALUES
-- (X'10000000000000000000000000000001', 'OpenAI', 'gpt-4o', 'GPT-4o', 0, 8192, 4096, 1);
--
-- -- 3. Users
-- -- Create our main user, Alice.
-- INSERT INTO users (id, email, username, display_name, roles, public_key, workspace_id) VALUES
-- (X'20000000000000000000000000000001', 'alice@evo.ai', 'alice', 'Alice', '["user"]', X'DEADBEEF', X'00000000000000000000000000000001');
--
-- -- 4. Agents
-- -- Create a default agent, Evo Assistant.
-- -- The participant_id will be updated later after the participant record is created.
-- INSERT INTO agents (id, name, description, agent_type, status, model_id, workspace_id) VALUES
-- (X'30000000000000000000000000000001', 'Evo Assistant', 'A helpful AI assistant.', 0, 0, X'10000000000000000000000000000001', X'00000000000000000000000000000001');
--
-- -- 5. Participants
-- -- Create participant records for the user and agent so they can interact.
-- -- A participant is the "actor" in a conversation.
-- INSERT INTO participants (id, user_id, display_name, participant_type, status, workspace_id) VALUES
-- (X'40000000000000000000000000000001', X'20000000000000000000000000000001', 'Alice', 0, 0, X'00000000000000000000000000000001');
--
-- INSERT INTO participants (id, agent_id, display_name, participant_type, status, workspace_id) VALUES
-- (X'40000000000000000000000000000002', X'30000000000000000000000000000001', 'Evo Assistant', 1, 0, X'00000000000000000000000000000001');
--
-- -- 6. Update Agent with its Participant ID
-- -- Now that the agent's participant record exists, link it back.
-- UPDATE agents
-- SET participant_id = X'40000000000000000000000000000002'
-- WHERE id = X'30000000000000000000000000000001';
--
-- -- 7. P2P Nodes
-- -- Give Alice's participant a peer_id so she can be identified on the network.
-- INSERT INTO p2p_nodes (participant_id, peer_id, node_type, multiaddr, status) VALUES
-- (X'40000000000000000000000000000001', '12D3KooWExamplePeerIdForAlice12345', 1, '/ip4/127.0.0.1/tcp/4001', 0);
--
-- -- 8. Conversations
-- -- Create a conversation between Alice and the Evo Assistant.
-- INSERT INTO conversations (id, title, conversation_type, status, workspace_id) VALUES
-- (X'50000000000000000000000000000001', 'Getting Started', 0, 0, X'00000000000000000000000000000001');
--
-- -- 9. Conversation Participants
-- -- Add Alice and the Evo Assistant to the conversation.
-- INSERT INTO conversation_participants (conversation_id, participant_id, role) VALUES
-- (X'50000000000000000000000000000001', X'40000000000000000000000000000001', 0), -- Alice is Owner
-- (X'50000000000000000000000000000001', X'40000000000000000000000000000002', 3); -- Evo is Assistant
--
-- -- 10. Messages
-- -- Add a few messages to the conversation to make it feel alive.
-- INSERT INTO messages (id, conversation_id, sender_id, content, status, workspace_id) VALUES
-- (X'60000000000000000000000000000001', X'50000000000000000000000000000001', X'40000000000000000000000000000001', '{"text": "Hello, world! Can you help me get set up?"}', 3, X'00000000000000000000000000000001'),
-- (X'60000000000000000000000000000002', X'50000000000000000000000000000001', X'40000000000000000000000000000002', '{"text": "Of course! I''m here to help. What would you like to do first?"}', 3, X'00000000000000000000000000000001');
